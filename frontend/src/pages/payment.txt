 const handlePayment = async () => {
    try {
      if (!price || Number(price) <= 0) {
        alert("Please enter a valid price before continuing.");
        return;
      }

      const API_BASE = import.meta.env?.VITE_API_BASE || "http://localhost:5000";

      // 1) create Razorpay order
      const orderRes = await axios.post(
        `${API_BASE}/api/payment/create-order`,
        { amount: Number(price) },
        { withCredentials: true }
      );
      const order = orderRes.data;

      // 2) open Razorpay checkout
      const options = {
        key: import.meta.env.VITE_RAZORPAY_KEY_ID,
        amount: order.amount,
        currency: order.currency,
        name: "Cyphire",
        description: "Task Payment",
        order_id: order.id,
        handler: async function (response) {
          try {
            // 3) on success -> verify + create task (multipart with attachments)
            const fd = new FormData();
            fd.append("razorpay_order_id", response.razorpay_order_id);
            fd.append("razorpay_payment_id", response.razorpay_payment_id);
            fd.append("razorpay_signature", response.razorpay_signature);

            fd.append("title", title);
            fd.append("description", description);
            selectedCategories.forEach((c) => fd.append("categories[]", c));
            fd.append("numberOfApplicants", numApplicants);
            fd.append("price", price);
            fd.append("deadline", deadline);
            attachments.forEach((f) => fd.append("attachments", f));

            setPosting(true);

            const verifyRes = await axios.post(
              `${API_BASE}/api/payment/verify-payment`,
              fd,
              {
                headers: { "Content-Type": "multipart/form-data" },
                withCredentials: true,
              }
            );

            if (verifyRes.data?.success) {
              setPosted(true);
              setTimeout(() => navigate("/home"), 1500);
            } else {
              setPosting(false);
              alert("Payment verified but task creation failed.");
            }
          } catch (e) {
            setPosting(false);
            console.error("Verify/payment error:", e);
            alert("Payment verification failed. Task not posted.");
          }
        },
        theme: { color: "#5A67D8" },
      };

      const rzp = new window.Razorpay(options);
      rzp.open();
    } catch (e) {
      console.error("Payment init error:", e);
      alert("Failed to start payment.");
    }
  };